@using Sort.Business
@using Sort.Mvc.Classes
@model Sort.Mvc.Models.ArtifactModel
@{
    ViewBag.Title = "Artifact " + Model.Sort.TitleStr;
    Breadcrumb.Add("Home", "/")
        .Next(ViewBag.Title);
}

@Html.HiddenFor(m => m.SortMainId)
@Html.HiddenFor(m => m.OwnerName)
@Html.HiddenFor(m => m.Sort.Title)
@Html.Hidden("FailMessage", TempData["FailMessage"])

<div class="col-md-12">
    <a href="@Url.Action("Index", "Home")" class="btn btn-link"><i class="fa fa-long-arrow-left"></i> Home</a>
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h3 class="panel-title">Artifact @Model.Sort.TitleStr</h3>
        </div>
        <div class="panel-body">
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.Title)
                <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.TitleStr, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            @if (!string.IsNullOrWhiteSpace(Model.Sort.OstiId))
            {
                <div class="col-md-12">
                    @Html.BsLabelFor(m => m.Sort.OstiId)
                    <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.OstiId, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
                </div>
                <div class="col-md-12" style="min-height: 10px;"></div>
            }
            @if (Model.Sort.OstiDate.HasValue)
            {
                <div class="col-md-12">
                    @Html.BsLabelFor(m => m.Sort.OstiDate)
                    <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.OstiDate, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
                </div>
                <div class="col-md-12" style="min-height: 10px;"></div>
            }
            @if (!string.IsNullOrWhiteSpace(Model.Sort.OstiStatus))
            {
                <div class="col-md-12">
                    @Html.BsLabelFor(m => m.Sort.OstiStatus)
                    <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.OstiStatus, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
                </div>
                <div class="col-md-12" style="min-height: 10px;"></div>
            }
            @if (!string.IsNullOrWhiteSpace(Model.Sort.OstiStatusMsg))
            {
                <div class="col-md-12">
                    @Html.BsLabelFor(m => m.Sort.OstiStatusMsg)
                    <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.OstiStatusMsg, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
                </div>
                <div class="col-md-12" style="min-height: 10px;"></div>
            }
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.PublishTitle)
                <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.PublishTitle, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.PublicationDate)
                <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.PublicationDateTxt, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.ProductType)
                <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.ProductTypeDisplayName, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.ReportNumbers)
                <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.ReportNumbers, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.Country)
                <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.Country, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.Language)
                <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.Language, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.AccessLimitation)
                <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.AccessLimitationDisplayName, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
            </div>
            @if (Model.UserHasReadAccess)
            {
                <div class="col-md-12" style="min-height: 10px;"></div>
                <div class="col-md-12">
                    @Html.BsLabelFor(m => m.Sort.Abstract)
                    <div class="col-md-10">@Html.BsTextAreaFor(m => m.Sort.Abstract, new { @readonly = "readonly", @tabindex = "-1", @style = "height: 165px;", @placeholder = "No data available. Waiting for data input from User." })</div>
                </div>
            }
            <div class="col-md-12" style="min-height: 10px;"></div>
            @switch (Model.Sort.ProductTypeEnum)
            {
                case ProductTypeEnum.BookMonograph:
                    <div class="col-md-12">
                        @Html.BsLabelFor(m => m.Sort.PublisherInformation)
                        <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.PublisherInformation, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
                    </div>
                    <div class="col-md-12" style="min-height: 10px;"></div>
                    break;
                case ProductTypeEnum.ConfEvent:
                    <div class="col-md-12">
                        @Html.BsLabelFor(m => m.Sort.ConferenceInfo)
                        <div class="col-md-10">@Html.BsTextAreaFor(m => m.Sort.ConferenceInfo, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
                    </div>
                    <div class="col-md-12" style="min-height: 10px;"></div>
                    break;
                case ProductTypeEnum.JournalArticle:
                    <div class="col-md-12">
                        @Html.BsLabelFor(m => m.Sort.JournalInformation)
                        <div class="col-md-10">@Html.BsTextAreaFor(m => m.Sort.JournalInformation, new { @readonly = "readonly", @tabindex = "-1", @style = "height: 165px;", @placeholder = "No data available. Waiting for data input from User." })</div>
                    </div>
                    <div class="col-md-12" style="min-height: 10px;"></div>
                    break;
                case ProductTypeEnum.Patent:
                    <div class="col-md-12">
                        @Html.BsLabelFor(m => m.Sort.PatentAssignee)
                        <div class="col-md-10">@Html.BsTextBoxFor(m => m.Sort.PatentAssignee, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
                    </div>
                    <div class="col-md-12" style="min-height: 10px;"></div>
                    break;
            }
            @switch (Model.Sort.AccessLimitationEnum)
            {
                case AccessLimitationEnum.OpenNet:
                    <div class="col-md-12">
                        @Html.BsLabelFor(m => m.Sort.OpenNetData)
                        <div class="col-md-10">@Html.BsTextAreaFor(m => m.Sort.OpenNetData.Display, new { @readonly = "readonly", @tabindex = "-1", @style = "height: 145px;", @placeholder = "No data available. Waiting for data input from User." })</div>
                    </div>
                    <div class="col-md-12" style="min-height: 10px;"></div>
                    break;
                case AccessLimitationEnum.ProtectedData:
                    <div class="col-md-12">
                        @Html.BsLabelFor(m => m.Sort.ProtectedData)
                        <div class="col-md-10">@Html.BsTextAreaFor(m => m.Sort.ProtectedData.Display, new { @readonly = "readonly", @tabindex = "-1", @style = "height: 105px;", @placeholder = "No data available. Waiting for data input from User." })</div>
                    </div>
                    <div class="col-md-12" style="min-height: 10px;"></div>
                    break;
                case AccessLimitationEnum.ProgramDeterminedOfficialUseOnly:
                    <div class="col-md-12">
                        @Html.BsLabelFor(m => m.Sort.OfficialUseInformation)
                        <div class="col-md-10">@Html.BsTextAreaFor(m => m.Sort.OfficialUseInformation, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "No data available. Waiting for data input from User." })</div>
                    </div>
                    <div class="col-md-12" style="min-height: 10px;"></div>
                    break;
            }
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.Contacts)
                <div class="col-md-10">
                    @Html.Talon().Grid(Model.Sort.Contacts).Name("contacts").Columns(c =>
                    {
                        c.Bound(m => m.ContactId).Hidden();
                        c.Bound(m => m.IsValid).Hidden();
                        c.Bound(m => m.FullName).Sortable(false).Render("ValidationRender");
                        c.Bound(m => m.ContactType).Sortable(false);
                    }).Clean()
                </div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.Authors)
                <div class="col-md-10">
                    @Html.Talon().Grid(Model.Sort.Authors).Name("authors").Columns(c =>
                    {
                        c.Bound(m => m.AuthorId).Hidden();
                        c.Bound(m => m.IsValid).Hidden();
                        c.Bound(m => m.FullName).Sortable(false).Render("ValidationRender");
                        c.Bound(m => m.Affiliation).Sortable(false);
                        c.Bound(m => m.OrcidId).Sortable(false);
                        c.Bound(m => m.CountryState).Title("Country / State").Sortable(false);
                        c.Bound(m => m.IsPrimary).Order(SortDir.desc).Title("Primary").Sortable(false);
                    }).Clean()
                </div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.Funding)
                <div class="col-md-10">
                    @Html.Talon().Grid(Model.Sort.Funding).Name("funding").Columns(c =>
                    {
                        c.Bound(m => m.FundingId).Hidden();
                        c.Bound(m => m.IsValid).Hidden();
                        c.Bound(m => m.Year).Title("Fiscal Year").Sortable(false).Render("ValidationRender");
                        c.Bound(m => m.FundingType).Sortable(false);
                        c.Bound(m => m.DetailInfo).Title("Details").Sortable(false);
                        c.Bound(m => m.Org).Title("Funding Org").Sortable(false);
                        c.Bound(m => m.PercentFmt).Title("Funding Percent").Sortable(false);
                        c.Buttons(b =>
                        {
                            b.Button("ShowFundingInfo").Icon("info").Type("info").ToolTip("Show all the Funding Information");
                        }).Width(30).AlignCenter();
                    }).Clean()
                </div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.SubjectCategories)
                <div class="col-md-10">
                    @Html.Talon().Grid(Model.Sort.SubjectCategories).Name("subjects").Columns(c =>
                    {
                        c.Bound(m => m.MetaDataId).Hidden();
                        c.Bound(m => m.MetaDataType).Hidden();
                        c.Bound(m => m.Data).Title("Subject").Sortable(false);
                    }).Clean()
                </div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.CoreCapabilities)
                <div class="col-md-10">
                    @Html.Talon().Grid(Model.Sort.CoreCapabilities).Name("corecapabilities").Columns(c =>
                    {
                        c.Bound(m => m.MetaDataId).Hidden();
                        c.Bound(m => m.MetaDataType).Hidden();
                        c.Bound(m => m.Data).Title("Core Capability").Sortable(false);
                    }).Clean()
                </div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.SponsoringOrgs)
                <div class="col-md-10">
                    @Html.Talon().Grid(Model.Sort.SponsoringOrgs).Name("orgs").Columns(c =>
                    {
                        c.Bound(m => m.MetaDataId).Hidden();
                        c.Bound(m => m.MetaDataType).Hidden();
                        c.Bound(m => m.Data).Title("Sponsor").Sortable(false);
                    }).Clean()
                </div>
            </div>
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.KeywordList)
                <div class="col-md-10">
                    @Html.Talon().Grid(Model.KeywordList).Name("keywords").Columns(c =>
                    {
                        c.Bound(m => m.MetaDataId).Hidden();
                        c.Bound(m => m.MetaDataType).Hidden();
                        c.Bound(m => m.Data).Title("Keyword").Sortable(false);
                    }).Clean()
                </div>
            </div>
            @if (Model.UserHasReadAccess)
            {
                <div class="col-md-12" style="min-height: 10px;"></div>
                <div class="col-md-12">
                    @Html.BsLabelFor(m => m.Attachments)
                    <div class="col-md-10">
                        @Html.Talon().Grid(Model.Attachments).Name("attachments").Columns(c =>
                        {
                            c.Bound(m => m.SortAttachmentId).Hidden();
                            c.Bound(m => m.SortMainId).Hidden();
                            c.Bound(m => m.FileName).Title("File Name").Sortable(false);
                            c.Bound(m => m.AttachmentTypeName).Title("Attachment Type").Sortable(false);
                            c.Bound(m => m.Note).Title("Description").Sortable(false);
                            c.Bound(m => m.UploadDate).Title("Time Attached").Sortable(false);
                            c.Buttons(b =>
                            {
                                b.Button().Icon("download").Type("primary").ToolTip("Download Attachment")
                                    .Href(Url.Action("DownloadAttachment", "Artifact", new {id = "{SortAttachmentId}"}));
                            }).Width(30).AlignCenter();
                        }).Clean()
                    </div>
                </div>
            }
            <div class="col-md-12" style="min-height: 10px;"></div>
            <div class="col-md-12">
                @Html.BsLabelFor(m => m.Sort.Reviewers)
                <div class="col-md-10">
                    @Html.Talon().Grid(Model.Sort.Reviewers).Name("reviews").Columns(c =>
                    {
                        c.Bound(m => m.ReviewId).Hidden();
                        c.Bound(m => m.Reviewer).Sortable(false);
                        c.Bound(m => m.ReviewerTypeDisplayName).Title("Reviewer Type").Sortable(false);
                        c.Bound(m => m.ReviewDate).Title("Review Date").Sortable(false).Format("MM/dd/yyyy");
                        c.Bound(m => m.Approval).Title("Approved").Sortable(false);
                        c.Bound(m => m.Reason).Title("Reason");
                    }).Clean()
                </div>
            </div>
            @if (Model.MissingData != null && Model.MissingData.Count > 0)
            {
                <div class="col-md-12" style="min-height: 10px;"></div>
                <div class="col-md-12">
                    @Html.BsLabelFor(m => m.MissingData, new { @style = "color:red;" })
                    <div class="col-md-10">
                        <table class="table table-striped table-bordered dataTable no-footer" cellspacing="0" width="100%" style="width: 100%;">
                            <thead>
                                <tr>
                                    <th>Section</th>
                                    <th>Error</th>
                                </tr>
                            </thead>
                            <tbody style="color: red; ">
                                @foreach (var item in Model.MissingData)
                                {
                                    <tr>
                                        <td>@item.Section</td>
                                        <td>@item.Error</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else if (Model.UserIsAdmin)
            {
                using (Html.BeginForm("ChangeCoverPageRequired", "Artifact", FormMethod.Post))
                {
                    @Html.HiddenFor(m => m.SortMainId)
                    <div class="col-md-12">
                        <div class="col-md-6 col-md-offset-2">
                            <div class="pull-left">@Html.BsCheckBoxFor(m => m.CoverPageRequired, new { onchange = "this.form.submit();" })</div>
                            <div class="pull-left;" style="padding-top: 10px;">This Artifact requires a Cover Page to be Generated.</div>
                            <div class="clearfix"></div>
                        </div>
                    </div>
                }
            }
        
            @if (Model.NeedsPublished && Model.DelayToDate.HasValue && Model.DelayToDate.Value > DateTime.Now)
            {
                <div class="clearfix"></div>
                <div class="col-md-12" style="min-height: 10px;"></div>
                <div class="col-md-12">
                    @Html.BsLabelFor(m => m.DelayToDate)
                    <div class="col-md-2">@Html.BsTextBoxFor(m => m.DelayToDateStr, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "" })</div>
                    <a href="@Url.Action("ResetReleaseDelay", "Artifact", new { id = Model.SortMainId })" title="Clear Release Delay" class="btn btn-warning"><i class="fa fa-hand-lizard-o"></i> Clear Delay Release</a>
                </div>
                <div class="col-md-12" style="min-height: 10px;"></div>
                <div class="col-md-12">
                    @Html.BsLabelFor(m => m.DelayReason)
                    <div class="col-md-10">@Html.BsTextBoxFor(m => m.DelayReason, new { @readonly = "readonly", @tabindex = "-1", @placeholder = "" })</div>
                </div>
            }
        </div>

    </div>
    <div class="panel panel-primary">
        <div class="panel-body">
            <div class="col-md-12">
                <a href="@Url.Action("Index", "Home")" title="Home" class="btn btn-sm btn-default"><i class="fa fa-home"></i> Home</a>
                @if (!string.IsNullOrWhiteSpace(Model.LrsUrl))
                {
                    <a href="@Model.LrsUrl" target="_blank" title="View in LRS" class="btn btn-sm btn-default"><i class="fa fa-globe"></i> Open in LRS</a>
                }
                @if (Model.UserHasWriteAccess)
                {
                    <a href="@Url.Action("Edit", "Artifact", new {id = Model.SortMainId})" title="Edit Artifact" class="btn btn-sm btn-primary"><i class="fa fa-edit"></i> Edit</a>
                }
                @if (Model.NeedsPublished)
                {
                    <div class="btn-group">
                        <input name="button" type="button" value="Release" class="btn btn-success btn-sm" />
                        <button type="button" class="btn btn-success btn-sm dropdown-toggle" data-toggle="dropdown">
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            @if (!Model.DelayToDate.HasValue || Model.DelayToDate.Value < DateTime.Now)
                            {
                                <li>
                                    <a onclick="PublishToOsti(false);" style="width: 100%; text-align: left; color: white;" title="Publish To OSTI (Private Release)" class="btn btn-sm btn-success"><i class="fa fa-cloud-upload"></i> To OSTI (Private)</a>
                                </li>
                                <li>
                                    <a onclick="PublishToOsti(true);" style="width: 100%; text-align: left; color: white;" title="Publish To OSTI (Public Release)" class="btn btn-sm btn-success"><i class="fa fa-cloud-upload"></i> To OSTI (Public)</a>
                                </li>
                                <li>
                                    <a href="@Url.Action("SetReleaseDelay", "Artifact", new { id = Model.SortMainId })" style="width: 100%; text-align: left; color: white;" title="Delay Release" class="btn btn-sm btn-warning"><i class="fa fa-hand-rock-o"></i> Delay Release</a>
                                </li>
                            }
                            @if (!Model.ForceEdms)
                            {
                                <li>
                                    <a onclick="ForceEdms();" style="width: 100%; text-align: left; color: white;" title="Publish To EDMS Only" class="btn btn-sm btn-success"><i class="fa fa-cloud-upload"></i> Send to EDMS Only</a>
                                </li>
                            }
                            <li>
                                <a href="@Url.Action("SetOstiNumber", "Artifact", new { id = Model.SortMainId })" style="width: 100%; text-align: left; color: white;" title="Input OSTI Number and Mark Published" class="btn btn-sm btn-success"><i class="fa fa-stack-overflow"></i> Set at OSTI</a>
                            </li>
                            <li>
                                <a href="@Url.Action("DownloadXmlData", "Artifact", new {id = Model.SortMainId})" style="width: 100%; text-align: left; color: white;" title="Download OSTI XML" class="btn btn-sm btn-warning"><i class="fa fa-download"></i> Download OSTI XML</a>
                            </li>
                        </ul>
                    </div>
                }
                @if (Model.CanPublish)
                {
                    <div class="btn-group">
                        <input name="button" type="button" value="OSTI Document" class="btn btn-default btn-sm" />
                        <button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown">
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            @if (Model.HasOstiDoc)
                            {
                                <li>
                                    <a href="@Url.Action("GetOstiDocument", "Edms", new { id = Model.SortMainId })" style="width: 100%; text-align: left; color: white;" title="Download OSTI Document" class="btn btn-sm btn-default"><i class="fa fa-download"></i> Download</a>
                                </li>
                                <li>
                                    <a href="@Url.Action("DeleteOstiDocument", "Artifact", new { id = Model.SortMainId, aRtn = true })" style="width: 100%; text-align: left; color: white;" title="Delete OSTI Document" class="btn btn-sm btn-danger"><i class="fa fa-trash"></i> Delete</a>
                                </li>
                            }
                            else
                            {
                                if (Model.CoverPageRequired)
                                {
                                    <li>
                                        <a href="@Url.Action("GetCoverPage", "Edms", new { id = Model.SortMainId })" style="width: 100%; text-align: left; color: white;" title="Download Cover Page" class="btn btn-sm btn-default"><i class="fa fa-file-text-o"></i> Download Cover Page</a>
                                    </li>
                                }
                                <li>
                                    <a href="@Url.Action("CreateOstiDocument", "Artifact", new { id = Model.SortMainId, aRtn = true })" style="width: 100%; text-align: left; color: white;" title="Generate OSTI Document through Adlib" class="btn btn-sm btn-default"><i class="fa fa-cogs"></i> Generate (Adlib)</a>
                                </li>
                            }
                        </ul>
                    </div>
                }
                @if (Model.NeedsReminder)
                {
                    <a onclick="SendReminder();" title="Send Reminder" class="btn btn-sm btn-warning"><i class="fa fa-envelope-o"></i> Send Reminder Email</a>
                    <a href="@Url.Action("SetDueDate", "Artifact", new {id = Model.SortMainId, alt = true})" title="Update Due Date" class="btn btn-sm btn-warning"><i class="fa fa-clock-o"></i> Update Due Date</a>
                }
                @if (Model.IsPublished)
                {
                    <a href="@Url.Action("DownloadXmlData", "Artifact", new {id = Model.SortMainId})" title="Download OSTI XML" class="btn btn-sm btn-warning"><i class="fa fa-download"></i> XML</a>
                }

                @if (Model.CanUpdateDueDate && !Model.NeedsReminder)
                {
                    <a href="@Url.Action("SetDueDate", "Artifact", new { id = Model.SortMainId, alt = true })" title="Update Due Date" class="btn btn-sm btn-warning" style="margin-left: 3px;"><i class="fa fa-clock-o"> Update Due Date</i></a>
                }

                @if (UserObject.CurrentUser.IsInAnyRole("Admin,ReleaseOfficial"))
                {
                    <a onclick="DeleteArtifact();" title="Permanently Delete Artifact from SORT" class="btn btn-sm btn-danger"><i class="fa fa-trash"></i> Delete</a>
                }
            </div>
        </div>
    </div>

</div>

@*NOTE: Used for loading the Funding Info partial*@
<div id="FundingInfo">

</div>

<script>
    $(document).ready(function () {
        $('td.dataTables_empty').each(function () {
            $(this).text('No data available. Waiting for data input from User.');
        });

        var stab = $('#FailMessage').val();
        if (stab != '') {
            alert(stab);
        }
    });

    function SendReminder() {
        BootstrapDialog.show({
            title: 'Send Reminder',
            type: BootstrapDialog.TYPE_PRIMARY,
            message: 'Are you sure you wish to send an email reminder to ' + $('#OwnerName').val(),
            closable: false,
            buttons: [{
                label: 'Yes',
                id: 'btnYes1',
                cssClass: 'btn-primary',
                action: function (dialogRef) {
                    // Yes was clicked, so hid the buttons, and display that we are publishing
                    var $closebutton = dialogRef.getButton('btnNo1');
                    $closebutton.hide();
                    var $mainbutton = dialogRef.getButton('btnYes1');
                    $mainbutton.hide();
                    dialogRef.getModalBody().html('Sending Email. Please Wait...');
                    // Make an ajax call to send the reminder email
                    $.post("/Artifact/SendReminderEmail",
                        {
                            id: $('#SortMainId').val()
                        },
                        function (data) {
                            // Display the results of the send
                            if (data != null) {
                                if (data.Result == -1) {
                                    dialogRef.getModalBody().html('<p style="color: Red;">Email Failed</p><p>Message: <b>' + data.Message + '</b> was returned.</p>');
                                } else {
                                    dialogRef.getModalBody().html('<p styel="color: Green;">Email was successfully Sent</p>');
                                }
                            } else {
                                dialogRef.getModalBody().html('<p style="color: Red;">Email Failed</p><p>Unexpected results where returned</p>');
                            }
                            // 5 second delay to close dialog
                            setTimeout(function () { dialogRef.close(); }, 5000);
                        }).fail(function (xhr, status, error) {
                            dialogRef.getModalBody().html('<p style="color: Red;">Email Failed</p><p>Error: ' + error + '</p>');
                            setTimeout(function () { dialogRef.close(); }, 5000);
                        });
                }
            }, {
                // No was clicked, so close this dialog
                label: 'No',
                id: 'btnNo1',
                cssClass: 'btn-default',
                action: function (dialogRef) {
                    dialogRef.close();
                }
            }]
        });
    }

    function ForceEdms() {
        $.confirm({
            icon: 'fa fa-warning',
            title: 'Publish to EDMS',
            content: 'Are you sure you wish to Publish this Artifact to EDMS without sending it to OSTI?',
            confirmButtonClass: 'btn-danger',
            cancelButtonClass: 'btn-success',
            confirmButton: "Yes",
            cancelButton: "No",
            confirm: function () {
                window.location.href = "/Artifact/ForceEdms/" + $('#SortMainId').val();
            }
        });
    }

    function DeleteArtifact() {
        $.confirm({
            icon: 'fa fa-danger',
            title: 'Delete Artifact',
            content: 'Are you sure you wish to Permanently DELETE this artifact from SORT.  You can not undo this.',
            confirmButtonClass: 'btn-danger',
            cancelButtonClass: 'btn-success',
            confirmButton: "Yes",
            cancelButton: "No",
            confirm: function () {
                window.location.href = "/Artifact/DeleteArtifact/" + $('#SortMainId').val();
            }
        });
    }

    function PublishToOsti(publicRelease) {
        // Ask if they are sure they wish to publish the artifact to OSTI
        BootstrapDialog.show({
            title: 'Publish to OSTI',
            type: BootstrapDialog.TYPE_PRIMARY,
            message: 'Are you sure you wish to publish this artifact to OSTI?',
            closable: false,
            buttons: [{
                label: 'Yes',
                id: 'btnYes',
                cssClass: 'btn-primary',
                action: function (dialogRef) {
                    // Yes was clicked, so hid the buttons, and display that we are publishing
                    var $closebutton = dialogRef.getButton('btnNo');
                    $closebutton.hide();
                    var $mainbutton = dialogRef.getButton('btnYes');
                    $mainbutton.hide();
                    dialogRef.getModalBody().html('Releasing artifact to OSTI. Please Wait...');
                    // Make an ajax call to publish to OSTI
                    $.post("/Artifact/PublishToOsti",
                        {
                            id: $('#SortMainId').val(),
                            pr: publicRelease
                        },
                        function (data) {
                            // Display the results of the publish, refresh screen after a 5 second wait for the display to be read.
                            if (data != null) {
                                if (data.Result == -1) {
                                    dialogRef.getModalBody().html('<p style="color: Red;">Publish Failed</p><p>Message: <b>' + data.Message + '</b> was returned.</p>');
                                    // Timer for 5 second delay
                                    setTimeout(function () { window.location.reload(true); }, 5000);
                                } else {
                                    dialogRef.getModalBody().html('<p styel="color: Green;">Publish was successful</p><p><b>' + data.Id + '</b> OSTI ID was returned</p>');
                                    // Timer for 5 second delay
                                    setTimeout(function () {
                                        if (publicRelease) {
                                            window.location.reload(true);
                                        } else {
                                            window.location.href = "/Artifact/SetOneYearReminder/" + $('#SortMainId').val();
                                        }
                                    }, 5000);
                                }
                            }
                            else {
                                dialogRef.getModalBody().html('<p style="color: Red;">Publish Failed</p><p>Unexpected results where returned</p>');
                                // Timer for 5 second delay
                                setTimeout(function () { window.location.reload(true); }, 5000);
                            }
                        }).fail(function (xhr, status, error) {
                            dialogRef.getModalBody().html('<p style="color: Red;">{ Failed</p><p>Error: ' + error + '</p>');
                            setTimeout(function () { window.location.reload(true); }, 5000);
                        });
                }
            }, {
                // No was clicked, so close this dialog
                label: 'No',
                id: 'btnNo',
                cssClass: 'btn-default',
                action: function (dialogRef) {
                    dialogRef.close();
                }
            }]
        });
    }

    function ShowFundingInfo(row) {
        $.post("/Artifact/GetFundingInfoPartial",
            {
                id: row['FundingId']
            },
            function (data) {
                $("#FundingInfo").html(data);
                $('#dvFundingInfo').modal('show');
            }).fail(function (response) { if (response.responseText != '') { alert(response.responseText); } });
    }

    function ValidationRender(data, type, row) {
        if (row["IsValid"] == "True") {
            return data;
        } else {
            return "<i style=\"Color:Red;\">(Invalid) </i>" + data;
        }
    }
</script>